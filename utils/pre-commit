#!/bin/bash
#
# looks for a file name info.py in the src directory,
# the contents of which should be a semantic version number
# such as "1.2.3"
#
# this script will display the current version, automatically
# update version files. then the script will pull a list of changes
# from git history and update the CHANGES file.

_LOCK='/tmp/.CNCHI_PRE_COMMIT_LOCK'
INFO_PY='src/info.py'
_IS_JETBRAINS=''

echo 'checking for changes to pre-commit hook...'
if [[ utils/pre-commit -nt .git/hooks/pre-commit ]]; then
	echo 'updating pre-commit hook...'
	cp utils/pre-commit .git/hooks
	chmod +x .git/hooks/pre-commit
	# Run updated pre-commit hook script
	.git/hooks/pre-commit
	# Exit with the exit status of the updated script.
	exit $?
fi

for _ide in pycharm intellij clion
do
	if [[ "${LD_LIBRARY_PATH}" = *"${_ide}"* ]]; then
		export _IS_JETBRAINS='True'
		break
	fi
done

# Work-around issue in Jetbrains IDEs caused by their use of `git commit --only`
# Basically, the first time the hook runs it will exit with non-zero status
# causing the commit to be aborted so that the IDE will notice the additional changed
# files and add them to its call to `git commit --only`. Before doing so the hook
# will perform its normal tasks (updating version in files and updating CHANGES file)
# and it will set a lock file. If the lock file is detected we know that this is not
# the first attempt and so we unset the lock and immediately exit with zero status.
[[ 'True' = "${_IS_JETBRAINS}" && -f "${_LOCK}" ]] && { rm "${_LOCK}"; exit 0; }

[[ 'True' = "${_IS_JETBRAINS}" ]] && touch "${_LOCK}"

# Exit with failed status if we cannot find info.py
[[ -e "${INFO_PY}" ]] || { echo 'Could not find a info.py!'; exit 1; }

BASE_STRING=$(python3 "${INFO_PY}")
BASE_LIST=($(echo "${BASE_STRING}" | tr '.' ' '))
V_MAJOR="${BASE_LIST[0]}"
V_MINOR="${BASE_LIST[1]}"
V_PATCH="${BASE_LIST[2]}"

echo "Current version : ${BASE_STRING}"
V_PATCH=$((V_PATCH + 1))
SUGGESTED_VERSION="${V_MAJOR}.${V_MINOR}.${V_PATCH}"

echo "New version : ${SUGGESTED_VERSION}"
sed -i "s|${BASE_STRING}|${SUGGESTED_VERSION}|g" "${INFO_PY}"
sed -i "s|${BASE_STRING}|${SUGGESTED_VERSION}|g" README.md

echo 'Updating CHANGES file...'
{ grep -q '`master`' README.md && HISTORY_FROM=$((V_MINOR - 1)); } || HISTORY_FROM="${V_MINOR}"
git log --pretty=format:"[%ai] %<(69,trunc) %s %><(15) %aN {%h}" --cherry-pick "0.${HISTORY_FROM}.x...HEAD" > CHANGES

echo "Updating latest.json..."
python3 utils/generate_update_info.py

echo "Checking file permissions..."
utils/fix-permissions.sh

git add CHANGES README.md "${INFO_PY}" update.info && {
	{ [[ 'True' = "${_IS_JETBRAINS}" ]] \
		&& echo 'JETBRAINS IDE DETECTED: DO COMMIT AGAIN TO FINALIZE IT' \
		&& exit 1; } || exit 0
}

